// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model Role {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
  users       User[]
}

model User {
  id String @id @default(uuid())

  name     String
  email    String @unique
  password String

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  categories  Category[]
  costCenters CostCenter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum CategoryTypeEnum {
  RECEIPT
  FIXED_EXPENSE
  VARIABLE_EXPENSE
}

model FlowClass {
  id String @id @default(uuid())

  name String

  categories Category[]
}

model DreClass {
  id String @id @default(uuid())

  name String

  categories Category[]
}

model Category {
  id String @id @default(uuid())

  sequence    Int              @default(autoincrement())
  name        String
  description String?
  fatherId    String?
  type        CategoryTypeEnum
  deductible  Boolean          @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  flowClassId String
  flowClass   FlowClass @relation(fields: [flowClassId], references: [id])

  dreClassId String
  dreClass   DreClass @relation(fields: [dreClassId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CostCenter {
  id String @id @default(uuid())

  sequence    Int     @default(autoincrement())
  name        String
  description String?
  fatherId    String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
